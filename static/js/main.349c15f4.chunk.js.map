{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","regEx","NewMovie","state","noTitleError","noImageError","noImdbLinkError","noImdbIdError","invalidUrlError","wasAttempted","handleChange","event","currentTarget","name","value","setState","disableSubmit","shouldBeDisabled","match","validate","isValid","trim","resetState","submitChanges","onAdd","props","preventDefault","this","autoComplete","onSubmit","type","placeholder","onChange","classNames","disabled","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.349c15f4.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { Component } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\ntype State = {\n  title: string;\n  description: string;\n  imgUrl: string;\n  imdbUrl: string;\n  imdbId: string;\n  noTitleError: string;\n  noImageError: string;\n  noImdbLinkError: string;\n  noImdbIdError: string;\n  invalidUrlError: string;\n  wasAttempted: boolean;\n};\n\nconst regEx = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    noTitleError: 'Title is required',\n    noImageError: 'Image url is required',\n    noImdbLinkError: 'IMDB url is required',\n    noImdbIdError: 'IMDB id is required',\n    invalidUrlError: 'Invalid url',\n    wasAttempted: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    const { name, value } = event.currentTarget;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  disableSubmit = () => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      wasAttempted,\n    } = this.state;\n    let shouldBeDisabled = false;\n\n    if (wasAttempted && (!title\n      || !imgUrl\n      || !imdbUrl\n      || !imdbId\n      || !imgUrl.match(regEx)\n      || !imdbUrl.match(regEx))) {\n      shouldBeDisabled = true;\n    }\n\n    return shouldBeDisabled;\n  };\n\n  validate = () => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n    let isValid = false;\n\n    if (title.trim()\n      && imgUrl.trim()\n      && imdbUrl.trim()\n      && imdbId.trim()\n      && imdbUrl.match(regEx)\n      && imgUrl.match(regEx)\n    ) {\n      isValid = true;\n    }\n\n    return isValid;\n  };\n\n  resetState = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      wasAttempted: false,\n    });\n  };\n\n  submitChanges = (event: React.FormEvent<HTMLFormElement>) => {\n    const { onAdd } = this.props;\n\n    event.preventDefault();\n    this.setState({ wasAttempted: true });\n    if (this.validate()) {\n      onAdd(this.state);\n      this.resetState();\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      noTitleError,\n      noImageError,\n      noImdbLinkError,\n      noImdbIdError,\n      invalidUrlError,\n      wasAttempted,\n    } = this.state;\n\n    return (\n      <form\n        autoComplete=\"off\"\n        className=\"Form\"\n        onSubmit={this.submitChanges}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n          className={classNames('Form__input', {\n            'Form__input--invalid': wasAttempted && noTitleError && !title,\n          })}\n        />\n\n        {!title && wasAttempted && (\n          <p className=\"Form__error-message\">\n            {noTitleError}\n          </p>\n        )}\n\n        <textarea\n          name=\"description\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={this.handleChange}\n          className=\"Form__input\"\n        />\n\n        <input\n          type=\"text\"\n          placeholder=\"Image url\"\n          name=\"imgUrl\"\n          value={imgUrl}\n          onChange={this.handleChange}\n          className={classNames('Form__input', {\n            'Form__input--invalid': wasAttempted\n            && (!imgUrl || !imgUrl.match(regEx)),\n          })}\n        />\n\n        {!imgUrl && wasAttempted && (\n          <p className=\"Form__error-message\">\n            {noImageError}\n          </p>\n        )}\n\n        {imgUrl && !imgUrl.match(regEx) && (\n          <p className=\"Form__error-message\">\n            {invalidUrlError}\n          </p>\n        )}\n\n        <input\n          type=\"text\"\n          placeholder=\"IMDB url\"\n          name=\"imdbUrl\"\n          value={imdbUrl}\n          onChange={this.handleChange}\n          className={classNames('Form__input', {\n            'Form__input--invalid': wasAttempted\n            && (!imdbUrl || !imdbUrl.match(regEx)),\n          })}\n        />\n\n        {!imdbUrl && wasAttempted && (\n          <p className=\"Form__error-message\">\n            {noImdbLinkError}\n          </p>\n        )}\n\n        {imdbUrl && !imdbUrl.match(regEx) && (\n          <p className=\"Form__error-message\">\n            {invalidUrlError}\n          </p>\n        )}\n\n        <input\n          type=\"text\"\n          placeholder=\"IMDB id\"\n          name=\"imdbId\"\n          value={imdbId}\n          onChange={this.handleChange}\n          className={classNames('Form__input', {\n            'Form__input--invalid': wasAttempted && noImdbIdError && !imdbId,\n          })}\n        />\n\n        {!imdbId && wasAttempted && (\n          <p className=\"Form__error-message\">\n            {noImdbIdError}\n          </p>\n        )}\n\n        <button\n          type=\"submit\"\n          disabled={this.disableSubmit()}\n          className=\"Form__button\"\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => ({\n      movies: [movie, ...state.movies],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}